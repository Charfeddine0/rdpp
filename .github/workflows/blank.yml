name: RDP via Ngrok

on: 
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  RDP_USER: remoteuser8
  RDP_PASS: SecureP@ssw0rd8

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Enable RDP and create user
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        $user = "$env:RDP_USER"
        $pass = ConvertTo-SecureString "$env:RDP_PASS" -AsPlainText -Force

        if ($user -ne "runneradmin") {
          New-LocalUser -Name $user -Password $pass -AccountNeverExpires -UserMayNotChangePassword
          Add-LocalGroupMember -Group "Administrators" -Member $user
        } else {
          Set-LocalUser -Name $user -Password $pass
        }

    - name: Download and configure Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath $PWD\ngrok
        $env:Path += ";$PWD\ngrok"
        .\ngrok\ngrok.exe authtoken $env:NGROK_AUTH_TOKEN

    - name: Start Ngrok Tunnel and display connection info
      run: |
        Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -WindowStyle Hidden
        Start-Sleep -Seconds 10

        $tunnelReady = $false
        for ($i = 0; $i -lt 10; $i++) {
          try {
            $response = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
            $url = ($response.tunnels | Where-Object { $_.proto -eq "tcp" }).public_url
            if ($url) {
              $url = $url -replace "^tcp://", ""
              $address, $port = $url -split ":"
              Write-Host "=================================="
              Write-Host "‚úÖ RDP Address: ${address}:${port}"
              Write-Host "üë§ Username: $env:RDP_USER"
              Write-Host "üîê Password: $env:RDP_PASS"
              Write-Host "=================================="
              $tunnelReady = $true
              break
            }
          } catch {
            Write-Host "Attempt ${i}: Waiting for Ngrok to start..."
            Start-Sleep -Seconds 5
          }
        }

        if (-not $tunnelReady) {
          throw "‚ùå Failed to start Ngrok tunnel"
        }

    - name: Keep session alive (6 hours max)
      run: |
        $end = (Get-Date).AddHours(6)
        while ((Get-Date) -lt $end) {
          Start-Sleep -Seconds 300
          Write-Host "üïí Still alive at $(Get-Date -Format 'HH:mm:ss')"
        }

    - name: Cleanup Ngrok
      if: always()
      run: |
        $ngrokProc = Get-Process ngrok -ErrorAction SilentlyContinue
        if ($ngrokProc) {
          $ngrokProc | Stop-Process -Force
          Write-Host "üßπ Ngrok process terminated"
        }

